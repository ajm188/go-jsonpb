package gen

import (
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

type TestFile struct {
	b []string
}

type TestProtoFD struct {
	protoreflect.FileDescriptor // embed but do not implement (all of) the interface
	path                        string
}

func (fd *TestProtoFD) Path() string {
	return fd.path
}

func (tf *TestFile) P(ts ...interface{}) {
	b := strings.Builder{}
	for _, t := range ts {
		b.WriteString(fmt.Sprint(t))
	}

	tf.b = append(tf.b, b.String())
}

func TestGenerateHeader(t *testing.T) {
	var (
		major int32 = 1
		minor int32 = 2
		patch int32 = 3

		deprecated bool = true
	)

	req := &pluginpb.CodeGeneratorRequest{
		CompilerVersion: &pluginpb.Version{
			Major: &major,
			Minor: &minor,
			Patch: &patch,
		},
	}

	req.GetCompilerVersion()
	tests := []struct {
		name  string
		file  *protogen.File
		lines []string
	}{
		{
			name: "string",
			file: &protogen.File{Desc: &TestProtoFD{path: "test.proto"}},
			lines: []string{
				"// Code generated by protoc-gen-go-json. DO NOT EDIT.",
				"// versions:",
				"// \tprotoc-gen-go-json (unknown)",
				"// \tprotoc             v1.2.3",
				"// source: test.proto",
				"",
			},
		},
		{
			name: "deprecated",
			file: &protogen.File{
				Desc: &TestProtoFD{path: "test.proto"},
				Proto: &descriptorpb.FileDescriptorProto{
					Options: &descriptorpb.FileOptions{
						Deprecated: &deprecated,
					},
				},
			},
			lines: []string{
				"// Code generated by protoc-gen-go-json. DO NOT EDIT.",
				"// versions:",
				"// \tprotoc-gen-go-json (unknown)",
				"// \tprotoc             v1.2.3",
				"// test.proto is a deprecated file.",
				"",
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			g := &TestFile{b: []string{}}
			GenerateHeader(g, req, test.file)

			assert.Equal(t, test.lines, g.b, "Got %+v", g.b)
		})
	}
}
