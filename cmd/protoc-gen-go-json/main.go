package main

import (
	"flag"
	"fmt"
	"log"

	"google.golang.org/protobuf/compiler/protogen"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := fmt.Sprintf("%s_json.pb.go", file.GeneratedFilenamePrefix)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	protocVersion := "(unknown)"
	if v := gen.Request.GetCompilerVersion(); v != nil {
		protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
	}

	g.P("// Code generated by protoc-gen-go-json. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// \tprotoc-gen-go-json ", "(unknown)")
	g.P("// \tprotoc             ", protocVersion)

	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}

	g.P()

	g.P("package " + file.GoPackageName)
	g.P()

	g.P(`import "google.golang.org/protobuf/encoding/protojson"`)
	g.P()

	allMessages := []*protogen.Message{}
	allEnums := []*protogen.Enum{}
	allExtensions := []*protogen.Extension{}

	var walk func([]*protogen.Message, func(*protogen.Message))
	walk = func(messages []*protogen.Message, f func(*protogen.Message)) {
		for _, m := range messages {
			f(m)
			walk(m.Messages, f)
		}
	}

	initMessages := func(messages []*protogen.Message) {
		for _, message := range messages {
			allMessages = append(allMessages, message)
		}
	}
	initEnums := func(enums []*protogen.Enum) {
		for _, enum := range enums {
			allEnums = append(allEnums, enum)
		}
	}
	initExtensions := func(extensions []*protogen.Extension) {
		for _, ext := range extensions {
			allExtensions = append(allExtensions, ext)
		}
	}

	initMessages(file.Messages)
	initEnums(file.Enums)
	initExtensions(file.Extensions)
	walk(file.Messages, func(m *protogen.Message) {
		initMessages(m.Messages)
		initEnums(m.Enums)
		initExtensions(m.Extensions)
	})

	for i, m := range allMessages {
		g.P("func (x *", m.GoIdent, ") MarshalJSON() ([]byte, error) {")
		g.P("return protojson.Marshal(x)")
		g.P("}")

		if i != len(allMessages)-1 {
			g.P()
		}
	}

	// Trailing newline.
	g.P()
}

func main() {
	var (
		flags flag.FlagSet

		unmarshal = flags.Bool("unmarshal", false, "Include unmarshaler implementations.")
	)

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		if *unmarshal {
			log.Print("told to unmarshal as well")
		}
		for _, f := range gen.Files {
			GenerateFile(gen, f)
		}
		return nil
	})
}
